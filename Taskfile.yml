version: '3'

vars:
  MACHINE_ROOT:
    sh: echo $MACHINE_ROOT

tasks:
  all:
    requires:
      vars: [MACHINE_ROOT]
    cmds:
      - for:
          matrix:
            COMPILER: [gcc@9.5.0, gcc@10.4.0, gcc@11.3.0, gcc@12.3.0, gcc@13.1.0, llvm@14.0.6, llvm@15.0.7, llvm@16.0.2]
            CONFIG: [Release-Native, Release, RelWithDebInfo, MinSizeRel]
        task: worker
        vars:
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          BUILD_TYPE: "{{.ITEM.CONFIG}}"
          COMPILER: "{{.ITEM.COMPILER}}"

  git-clone:
    requires:
      vars: [DST, URL, BRANCH, SHA]
    cmds:
      - rm -rf "{{.DST}}"
      - git clone --depth 1 --branch "{{.BRANCH}}" "{{.URL}}" "{{.DST}}"
    status:
      - test -d "{{.DST}}"
      - cd "{{.DST}}" && git rev-parse HEAD | grep "{{.SHA}}"
      - cd "{{.DST}}" && git status --porcelain

  clone-kokkos:
    run: once
    requires:
      vars: [DST]
    cmds:
      - task: git-clone
        vars:
          DST: "{{.DST}}"
          URL: "https://github.com/kokkos/kokkos.git"
          BRANCH: 4.3.01
          SHA: "6ecdf605e0f7639adec599d25cf0e206d7b8f9f5"

  clone-kernels:
    run: once
    requires:
      vars: [DST]
    cmds:
      - task: git-clone
        vars:
          DST: "{{.DST}}"
          URL: "https://github.com/kokkos/kokkos-kernels.git"
          BRANCH: 4.3.01
          SHA: "d1a91b8a1f3aa4a972d7ff198bce73ec3248f641"

  install-kokkos:
    requires:
      vars: [BUILD_TYPE, SRC_DIR, BUILD_DIR, INSTALL_DIR, RUNNER]
    cmds:
      - task: clone-kokkos
        vars:
          DST: "{{.SRC_DIR}}"
      - |
        CMAKE_BUILD_TYPE="{{.BUILD_TYPE}}"
        EXTRA_CMAKE_FLAGS=""
        if [ "{{.BUILD_TYPE}}" = "Release-Native" ]; then
          CMAKE_BUILD_TYPE="Release"
          EXTRA_CMAKE_FLAGS="-DKokkos_ARCH_NATIVE=ON"
        fi
        {{.RUNNER}} cmake -S "{{.SRC_DIR}}" -B "{{.BUILD_DIR}}" \
          -DCMAKE_INSTALL_PREFIX="{{.INSTALL_DIR}}" \
          -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" \
          ${EXTRA_CMAKE_FLAGS}
      - "{{.RUNNER}} nice -n20 cmake --build {{.BUILD_DIR}} --target install --parallel $(nproc)"
      - mv {{.BUILD_DIR}}/CMakeCache.txt {{.INSTALL_DIR}}/.
      - rm -rf "{{.BUILD_DIR}}"
      - touch "{{.INSTALL_DIR}}/INSTALL_COMPLETE"
    status:
      - test -f "{{.INSTALL_DIR}}/INSTALL_COMPLETE"

  configure-kernels:
    requires:
      vars: [COMPILER, BUILD_TYPE, MACHINE_ROOT, JOB_DIR, BUILD_DIR]
    vars:
      KOKKOS_ROOT: "{{.JOB_DIR}}/install-kokkos"
      KERNELS_SRC: "{{.MACHINE_ROOT}}/src-kernels"
      KERNELS_BUILD: "{{.BUILD_DIR}}"
      RUNNER: "{{.JOB_DIR}}/runner.sh"
    cmds:
      - task: make-runner
        vars:
          DST: "{{.RUNNER}}"
          COMPILER: "{{.COMPILER}}"
      - task: install-kokkos
        vars:
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          SRC_DIR: "{{.MACHINE_ROOT}}/src-kokkos"
          BUILD_DIR: "{{.JOB_DIR}}/build-kokkos"
          INSTALL_DIR: "{{.KOKKOS_ROOT}}"
          RUNNER: "{{.RUNNER}}"
      - task: clone-kernels
        vars:
          DST: "{{.KERNELS_SRC}}/src-kernels"
      - |
        CMAKE_BUILD_TYPE="{{.BUILD_TYPE}}"
        if [ "{{.BUILD_TYPE}}" = "Release-Native" ]; then
          CMAKE_BUILD_TYPE="Release"
        fi
        ALSO_BUILD_PERF_OPTS=""
        if [ "" = "1" ]; then
          ALSO_BUILD_PERF_OPTS=""
        fi
        {{.RUNNER}} cmake -S "{{.KERNELS_SRC}}" -B "{{.KERNELS_BUILD}}" \
          -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" \
          -DKokkos_ROOT={{.KOKKOS_ROOT}}
    status:
      - test -f "{{.KERNELS_BUILD}}/CMakeCache.txt"

  build-kernels:
    requires:
      vars: [COMPILER, BUILD_TYPE, MACHINE_ROOT, JOB_DIR]
    vars:
      KOKKOS_ROOT: "{{.JOB_DIR}}/install-kokkos"
      KERNELS_SRC: "{{.MACHINE_ROOT}}/src-kernels"
      KERNELS_BUILD: "{{.JOB_DIR}}/build-kernels"
      RUNNER: "{{.JOB_DIR}}/runner.sh"
    cmds:
      - task: configure-kernels
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"
          BUILD_DIR: "{{.JOB_DIR}}/build-kernels"
      - "{{.RUNNER}} nice -n20 make -C {{.KERNELS_BUILD}} -j $(nproc)"
      - touch "{{.KERNELS_BUILD}}/BUILD_COMPLETE"
    status:
      - test -f "{{.KERNELS_BUILD}}/BUILD_COMPLETE"

  build-kernels-perf:
    requires:
      vars: [COMPILER, BUILD_TYPE, MACHINE_ROOT, JOB_DIR]
    vars:
      KOKKOS_ROOT: "{{.JOB_DIR}}/install-kokkos"
      KERNELS_SRC: "{{.MACHINE_ROOT}}/src-kernels"
      KERNELS_BUILD: "{{.JOB_DIR}}/build-kernels-perf"
      RUNNER: "{{.JOB_DIR}}/runner.sh"
    cmds:
      - task: make-runner
        vars:
          DST: "{{.RUNNER}}"
          COMPILER: "{{.COMPILER}}"
      - task: clone-kernels
        vars:
          DST: "{{.KERNELS_SRC}}/src-kernels"
      - task: install-kokkos
        vars:
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          SRC_DIR: "{{.MACHINE_ROOT}}/src-kokkos"
          BUILD_DIR: "{{.JOB_DIR}}/build-kokkos"
          INSTALL_DIR: "{{.KOKKOS_ROOT}}"
          RUNNER: "{{.RUNNER}}"
      - |
        CMAKE_BUILD_TYPE="{{.BUILD_TYPE}}"
        if [ "{{.BUILD_TYPE}}" = "Release-Native" ]; then
          CMAKE_BUILD_TYPE="Release"
        fi
        {{.RUNNER}} cmake -S "{{.KERNELS_SRC}}" -B "{{.KERNELS_BUILD}}" \
          -DCMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" \
          -DKokkos_ROOT={{.KOKKOS_ROOT}} \
          -DKokkosKernels_ENABLE_TESTS=ON \
          -DKokkosKernels_ENABLE_PERFTESTS=ON \
          -DKokkosKernels_ENABLE_BENCHMARK=ON
      - "{{.RUNNER}} nice -n20 make -C {{.KERNELS_BUILD}}/perf_test -j $(nproc)"
      - mv {{.KERNELS_BUILD}}/perf_test {{.JOB_DIR}}/perf
    status:
      - test -d {{.JOB_DIR}}/perf

  run-spmv:
    requires:
      vars: [COMPILER, BUILD_TYPE, MACHINE_ROOT, JOB_DIR]
    vars:
      PERF_ROOT: "{{.JOB_DIR}}/perf"
      RUNNER: "{{.JOB_DIR}}/runner.sh"
    cmds:
      - task: build-kernels-perf
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"
      - |
        "{{.RUNNER}}" "{{.PERF_ROOT}}/sparse/KokkosKernels_sparse_spmv_benchmark" \
          --benchmark_out_format=csv \
          --benchmark_out={{.JOB_DIR}}/sparse_spmv.csv \
          --benchmark_repetitions=5 \
          --benchmark_report_aggregates_only=true
      - touch "{{.JOB_DIR}}/{{.TASK}}.COMPLETE"
    sources:
      - "{{.PERF_ROOT}}/sparse/KokkosKernels_sparse_spmv_benchmark"
    status:
      - test -f "{{.JOB_DIR}}/{{.TASK}}.COMPLETE"

  download-mat:
    run: once
    requires:
      vars: [MACHINE_ROOT]
    cmds:
      - |
        wget -L --continue \
          https://suitesparse-collection-website.herokuapp.com/MM/Embree/ifiss_mat.tar.gz \
          -O "{{.MACHINE_ROOT}}/ifiss_mat.tar.gz"
      - tar -C "{{.MACHINE_ROOT}}" -xf "{{.MACHINE_ROOT}}/ifiss_mat.tar.gz"
    status:
      - test -f "{{.MACHINE_ROOT}}/ifiss_mat/ifiss_mat.mtx"
      - md5sum "{{.MACHINE_ROOT}}/ifiss_mat/ifiss_mat.mtx" | grep 7910557c9fbc815329a3f2bbe52dc590
    
  run-spgemm:
    requires:
      vars: [COMPILER, BUILD_TYPE, MACHINE_ROOT, JOB_DIR]
    vars:
      PERF_ROOT: "{{.JOB_DIR}}/perf"
      RUNNER: "{{.JOB_DIR}}/runner.sh"
    cmds:
      - task: download-mat
        vars:
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"
      - task: build-kernels-perf
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"
      - | 
        "{{.RUNNER}}" "{{.PERF_ROOT}}/sparse/sparse_spgemm" \
          --amtx "{{.MACHINE_ROOT}}/ifiss_mat/ifiss_mat.mtx" \
          | tee "{{.JOB_DIR}}/sparse_spgemm_ifiss_mat.txt"
      - touch "{{.JOB_DIR}}/{{.TASK}}.COMPLETE"
    sources:
      - "{{.JOB_DIR}}/sparse/sparse_spgemm"
    status:
      - test -f "{{.JOB_DIR}}/{{.TASK}}.COMPLETE"

  run-gemm:
    requires:
      vars: [COMPILER, BUILD_TYPE, MACHINE_ROOT, JOB_DIR]
    vars:
      PERF_ROOT: "{{.JOB_DIR}}/perf"
      RUNNER: "{{.JOB_DIR}}/runner.sh"
    cmds:
      - task: build-kernels-perf
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"
      - |
        "{{.RUNNER}}" "{{.PERF_ROOT}}/blas/blas3/KokkosBlas3_gemm_perf_test" \
          | tee "{{.JOB_DIR}}/KokkosBlas3_gemm_perf_test.txt"
      - touch "{{.JOB_DIR}}/{{.TASK}}.COMPLETE"
    sources:
      - "{{.JOB_DIR}}/perf/blas/blas3/KokkosBlas3_gemm_perf_test"
    status:
      - test -f "{{.JOB_DIR}}/{{.TASK}}.COMPLETE"

  run-perf-tests:
    requires:
      vars: [MACHINE_ROOT, COMPILER, BUILD_TYPE, JOB_DIR]
    cmds:
      - task: run-spmv
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"
      - task: run-spgemm
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"
      - task: run-gemm
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"

  make-runner:
    run: when_changed # (once for each unique set of vars)
    requires: 
      vars: [DST, COMPILER]
    cmds:
      - mkdir -p $(dirname "{{.DST}}")
      - |
        cat > "{{.DST}}" << EOF
        #! /bin/bash
        set -eou pipefail
        spack install {{.COMPILER}}
        spack load {{.COMPILER}}
        \$@
        EOF
      - chmod +x "{{.DST}}"

  measure-compile-time:
    requires:
      vars: [COMPILER, MACHINE_ROOT, JOB_DIR, BUILD_TYPE]
    vars:
      RUNNER: "{{.JOB_DIR}}/runner.sh"
      BUILD_DIR: "{{.JOB_DIR}}/build-kernels-time"
    cmds:
      - task: configure-kernels
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"
          BUILD_DIR: "{{.BUILD_DIR}}"
      - "{{.RUNNER}} time taskset -c 2 make -C {{.BUILD_DIR}} |& tee {{.JOB_DIR}}/build_1.log"
      - "{{.RUNNER}} time make -C {{.BUILD_DIR}} clean"
      - "{{.RUNNER}} time taskset -c 2 make -C {{.BUILD_DIR}} |& tee {{.JOB_DIR}}/build_2.log"
      - "{{.RUNNER}} time make -C {{.BUILD_DIR}} clean"
      - "{{.RUNNER}} time taskset -c 2 make -C {{.BUILD_DIR}} |& tee {{.JOB_DIR}}/build_3.log"
      - touch "{{.JOB_DIR}}/{{.TASK}}.COMPLETE"
    status:
      - test -f "{{.JOB_DIR}}/{{.TASK}}.COMPLETE"

  record-nm:
    requires:
      vars: [MACHINE_ROOT, COMPILER, BUILD_TYPE]
    vars:
      JOB_DIR: "{{.MACHINE_ROOT}}/{{.COMPILER}}_{{.BUILD_TYPE}}"
    cmds:
      - task: build-kernels
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"
      - nm "{{.JOB_DIR}}/build-kernels/libkokkoskernels.a" > "{{.JOB_DIR}}"/nm.out
    status:
      - test -f "{{.JOB_DIR}}/nm.out"

  record-du:
    requires:
      vars: [MACHINE_ROOT, COMPILER, BUILD_TYPE]
    vars:
      JOB_DIR: "{{.MACHINE_ROOT}}/{{.COMPILER}}_{{.BUILD_TYPE}}"
    cmds:
      - task: build-kernels
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          JOB_DIR: "{{.JOB_DIR}}"
      - du "{{.JOB_DIR}}/build-kernels/libkokkoskernels.a" > "{{.JOB_DIR}}"/du.out
    status:
      - test -f "{{.JOB_DIR}}/du.out"

  worker:
    requires: 
      vars: [MACHINE_ROOT, COMPILER, BUILD_TYPE]
    vars:
      COMPILER: "{{.COMPILER}}"
      KOKKOS_SRC: "{{.MACHINE_ROOT}}/kokkos"
      KERNELS_SRC: "{{.MACHINE_ROOT}}/kernels"
      JOB_DIR: "{{.MACHINE_ROOT}}/{{.COMPILER}}_{{.BUILD_TYPE}}"
      KOKKOS_INSTALL: "{{.JOB_DIR}}/install-kokkos"
    cmds:
      - task: record-nm
        vars:
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
      - task: record-du
        vars:
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
      - task: run-perf-tests
        vars:
          COMPILER: "{{.COMPILER}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
          JOB_DIR: "{{.JOB_DIR}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
      - task: measure-compile-time
        vars:
          COMPILER: "{{.COMPILER}}"
          JOB_DIR: "{{.JOB_DIR}}"
          MACHINE_ROOT: "{{.MACHINE_ROOT}}"
          BUILD_TYPE: "{{.BUILD_TYPE}}"
